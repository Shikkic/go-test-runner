#!/bin/bash
#
# Evaluate total Golag test coverage for a given filepath. Optionally returns an error if test coverage is below a passed in threshold.
#
# (Written using Google's shell styleguide https://google.github.io/styleguide/shell.xml, for modifications to this script,
# please consult the styling guide).
# 
# Author Daniel Cadden, Github @Shikkic.

main () {
    # Set globle variable defaults.
    EXIT_STATUS=0;
    MIN_COVERAGE_PERCENTAGE_NUM=0.0;
    VERBOSE_FLAG='false';
    FILE_PATH='.';

    # Parse flags and assign to global variables.
    while getopts ':n:f:v' flag; do
    case "${flag}" in
        n) MIN_COVERAGE_PERCENTAGE_NUM="${OPTARG}" ;;
        v) VERBOSE_FLAG="true" ;;
        f) FILE_PATH="${OPTARG}" ;;
        *) error "Unexpected option ${flag}" ;;
    esac
    done

    readonly MIN_COVERAGE_NU;
    readonly VERBOSE_FLAG;
    readonly FILE_PATH;
    TEMP_TEST_FILE_PATHS_ARR=();

    # Change our working directory to the file path provided.
    cd "$FILE_PATH";

    # Make sure we initiate clean up before exiting.
    trap clean_up EXIT;

    # Create a new coverage-all.txt file, that will contain the contents of every individual 
    # pkg's `coverage.out`.
    echo "mode: count" > coverage-all.txt;
    TEMP_TEST_FILE_PATHS_ARR+=("${PWD}/coverage.out");

    # Generate coverage numbers for all go files in the given FILE_PATH.
    generate_test_coverage;

    # Print the coverage report.
    test_coverage_report=$(generate_test_coverage_report);
    print_coverage_report "$test_coverage_report";

    # Generate test report, and parse the total coverage number.
    current_test_coverage_number=$(generate_test_coverage_number "$test_coverage_report");
    print_handler "\n\033[32mTest Coverage Percentage: $current_test_coverage_number%.\033[0m \n";

    # Check if the current test coverage number is above the threshold.
    check_for_minimum_test_coverage_percentage "$current_test_coverage_number";

    # Assign a correlating color to the exit_status.
    exit_status_color="\033[32m";
    if [[ $EXIT_STATUS -eq 1 ]]; then
        exit_status_color="\033[31m";
    fi

    echo -e $exit_status_color" Exiting with status code $EXIT_STATUS\033[0m\n";
    exit $EXIT_STATUS;
}

check_for_minimum_test_coverage_percentage () {
    local current_test_coverage_number;
    current_test_coverage_number=$(echo ${1%%.*});
    MIN_COVERAGE_PERCENTAGE_NUM=$(echo ${MIN_COVERAGE_PERCENTAGE_NUM%%.*});

    if ! [[ "$current_test_coverage_number" -ge "$MIN_COVERAGE_PERCENTAGE_NUM" ]]; then
        print_handler "\033[31mERROR: The current test coverage of $current_test_coverage_number% 
        is not above the threshold of $MIN_COVERAGE_PERCENTAGE_NUM%.
        Please review your changes and add test coverage for those changes.\033[0m \n";
        EXIT_STATUS=1;
    fi
}

generate_test_coverage () {
    echo -e '\033[33m';
    # For each go file found. 
    for pkg in $(find . -name "*.go" -print0 | xargs -0 -n1 dirname | sort --unique ); do
        # If the pkg filepath contains 'vendor' we do not want to test it.
        if [[ ${pkg} != *"vendor"* && ${pkg} != *"mock"* ]]; then
            # Run the go cover and output results to 'coverage.out'.
            OUTPUT=$(go test -v -cover -coverprofile=coverage.out -covermode=count $pkg);
            if [[ $OUTPUT == *"[no test files]"* ]]; then
                print_handler "no tests founds for "$pkg
                BASE_FOLDER_NAME=$(basename $pkg);
                MOCK_FILE_PATH="${PWD}/${pkg}/${BASE_FOLDER_NAME}_test.go";
                TEMP_TEST_FILE_PATHS_ARR+=($MOCK_FILE_PATH)
                touch $MOCK_FILE_PATH;
                echo "package ${BASE_FOLDER_NAME}" > $MOCK_FILE_PATH;
                k=$(go test -v -cover -coverprofile=coverage.out -covermode=count $pkg);
            fi

            # Take the results of coverage.out and append them to coverage-all.txt.
            tail -n +2 coverage.out >> coverage-all.txt;
        fi
    done
    echo -e "\033[0m";
}

generate_test_coverage_report () {
    local golang_test_coverage_report;
    golang_test_coverage_report=$(go tool cover -func="${PWD}/coverage-all.txt");
    echo "$golang_test_coverage_report";
}

generate_test_coverage_number ()  {
    local test_coverage_number;
    test_coverage_number=$(parse_test_coverage_number "$1");
    echo "$test_coverage_number";
}

parse_test_coverage_number() {
    local tail_of_report_string;
    tail_of_report_string=$(echo $1 | tail -1);

    local report_string_array;
    report_string_array=($tail_of_report_string);

    local end_of_array;
    end_of_array=${#report_string_array[@]}

    local total_test_coverage_percentage;
    total_test_coverage_percentage=${report_string_array[end_of_array - 1]};
    
    local total_test_coverage_number;
    total_test_coverage_number=$(echo $total_test_coverage_percentage | sed 's/%//');

    echo $total_test_coverage_number;
}

clean_up () {
    print_handler "Deleteing Mock Test Files";
    for i in "${TEMP_TEST_FILE_PATHS_ARR[@]}"
    do
        print_handler "\033[31mDeleteing $i\033[0m";
        rm $i;
    done
    print_handler "";
}

print_coverage_report () {
    local report_arr
    report_arr=($1);
    local count
    count=0;
    local temp
    temp="";
    
    for i in "${report_arr[@]}"
    do
        if [[ $((count % 3)) == 0 ]]; then
            print_handler "\033[33m$temp\033[0m";
            temp="";
        fi
        temp+=$i" ";
        count=$(( count + 1 ));
    done
    print_handler "\033[33m$temp\033[0m"; 
}

print_handler () {
    if [[ "$VERBOSE_FLAG" = "true" ]]; then
        echo -e $1
    fi
}

# Run the main method.
main "$@"
